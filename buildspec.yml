version: 0.2

phases:
  pre_build:
    on-failure: ABORT
    commands:
      - docker login -u $DOCKER_LOGIN -p $DOCKER_PSWD
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - echo $TAG
      - IMAGE=$ECR_REPO_URL:$TAG
      - echo $IMAGE
      - sed -i 's@DB_IMAGE@'"$DB_IMAGE"'@' kube-manifest/postgres-deployment.yml
      - sed -i 's@DB_USER@'"$DB_USER"'@' kube-manifest/postgres-deployment.yml
      - sed -i 's@DB_PASSWORD@'"$DB_PASSWORD"'@' kube-manifest/postgres-deployment.yml
      - sed -i 's@DB_NAME@'"$DB_NAME"'@' kube-manifest/postgres-deployment.yml
      - sed -i 's@CONTAINER_IMAGE@'"$IMAGE"'@' kube-manifest/module3-1-deployment.yml
      - export KUBECONFIG=$HOME/.kube/config
  build:
    on-failure: ABORT
    commands:
      - docker build --tag $ECR_REPO_URL:$TAG .
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL
      - docker push $ECR_REPO_URL:$TAG
  post_build:
    commands:
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl apply -f kube-manifest/
